<!-- // http://localhost/PHP_labs/php_laba_1/2/Lab_4.1.1/index.php -->
 <?php 

// preg_replace() - Функция PHP для поиска и замены в строке с использованием регулярных выражений.
//   $pattern     - Регулярное выражение для поиска.
//   $replacement - Строка, на которую нужно заменить найденное.
//   $string      - Строка, в которой производится поиск и замена.
//   Возвращает строку с выполненной заменой.


// Задание 5 
// Задачи на preg_match[_all] Задачи не всегда можно решить с помощью одной только регулярки. Может понадобится еще что-нибудь дописать на PHP (не всегда, но такое может быть). С помощью preg_match определите, что переданная строка является доменом. Примеры доменов: site.ru, site.com, my-site123.com.




function isDomain(string $domain): bool
{
  // Регулярное выражение для проверки домена.
  // ^ - Начало строки
  // (?!:\/\/)- Отрицательное утверждение вперед: строка не должна начинаться с "://"
  // [a-zA-Z0-9-]+ - Один или более символов: латинские буквы (в любом регистре), цифры, дефис
  // (\.[a-zA-Z0-9-]+)* - Ноль или более групп, состоящих из точки и одного или более символов: латинские буквы (в любом регистре), цифры, дефис
  // \.[a-zA-Z]{2,} - Точка и домен верхнего уровня (не менее двух латинских букв)
  // $ - Конец строки
  $pattern = '/^(?!:\/\/)([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/';

  return (bool) preg_match($pattern, $domain);
}

// Примеры использования
$domains = [
  "site.ru",
  "site.com",
  "my-site123.com",
  "site..ru",
  "site.123",
  "123.com"
];

foreach ($domains as $domain) {
  $isValid = isDomain($domain);
  echo "$domain: " . ($isValid ? "valid" : "invalid") . ', ';
}







// Задание 8
// На карманы в самой регулярке Дана строка 'aaa bcd xxx efg'. Найдите строки, состоящие из одинаковых символов (это будет aaa xxx).


$string = 'aaa bcd xxx efg';

// Регулярное выражение для поиска строк, состоящих из одинаковых символов.
// (\w) - захватывает любой буквенный символ в первую группу (карман).
// \1+ - ищет один или более повторений первой группы.  Т.е. ищет один и тот же символ, который был захвачен в первую группу.
// \b - граница слова, чтобы не находить 'aaaa' внутри 'baaab'.
$pattern = '/\b(\w)\1+\b/';

// Функция preg_match_all выполняет глобальный поиск по строке $string и помещает результаты в массив $matches.
preg_match_all($pattern, $string, $matches);

// Если что-то найдено
if (!empty($matches[0])) {
  echo "Строки, состоящие из одинаковых символов: " . implode(', ', $matches[0]) . "\n";
} else {
  echo "Строки, состоящие из одинаковых символов, не найдены.\n";
}







// Задание 15 
// На обратный слеш \ Дана строка 'a\a abc'. Напишите регулярку, которая заменит строку 'a\a' на '!'.


$string = 'a\\a abc';
$pattern = '/a\\\\a/'; // Экранируем обратный слеш дважды
$replacement = '!';

$result = preg_replace($pattern, $replacement, $string);

echo $result; // Выведет: ! abc





// Задание 28
// На '^', '$' Дана строка 'aaa aaa aaa'. Напишите регулярку, которая заменит последнее 'aaa' на '!'.

$string = 'aaa aaa aaa';

$pattern = '/aaa$/';
// $   -  Якорь, указывающий на конец строки.

$replacement = '!';

$result = preg_replace($pattern, $replacement, $string);

echo $result; // Вывод: aaa aaa !





// Задание 43
// На экранировку Дана строка '*+ *q+ *qq+ *qqq+ *qqq qqq+'. Напишите регулярку, которая найдет строки *q+, *qq+, *qqq+, не захватив остальные.


$string = '*+ *q+ *qq+ *qqq+ *qqq qqq+';


$pattern = '/\*q+\+/';
//$pattern = '/\b\*q+\+\b/';

preg_match_all($pattern, $string, $matches);

print_r($matches[0]);








// Задание 56
// На [a-zA-Z] и квантификаторы Дана строка 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ'. Напишите регулярку, которая найдет все слова по шаблону: любая кириллическая буква любое количество раз.

$string = 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ';

// / - Ограничитель начала и конца регулярного выражения
// \p{Cyrillic} - Любая кириллическая буква (поддерживает Unicode)
// + - Один или более раз (эквивалентно {1,})
// / - Ограничитель начала и конца регулярного выражения
// u - Модификатор, указывающий на то, что строка в UTF-8

$pattern = '/\p{Cyrillic}+/u';

preg_match_all($pattern, $string, $matches);

print_r($matches[0]);






// Задание 71
// На \s, \S, \w, \W, \d, \D Дана строка 'aa a1a a22a a333a a4444a a55555a aba aca'. Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр (в том числе и ноль цифр, то есть строка 'aa').

$string = 'aa a1a a22a a333a a4444a a55555a aba aca';

// ^ - начало строки (необходимо при preg_match, но в данном случае не нужно при preg_match_all)
// a - буква "a" в начале
// \d* - ноль или более цифр
// a - буква "a" в конце
// $ - конец строки (необходимо при preg_match, но в данном случае не нужно при preg_match_all)

$pattern = '/a\d*a/';

preg_match_all($pattern, $string, $matches);

print_r($matches[0]);

?>

